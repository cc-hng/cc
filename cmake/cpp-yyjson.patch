diff --git a/include/cpp_yyjson.hpp b/include/cpp_yyjson.hpp
index 0042aff..980d1dd 100644
--- a/include/cpp_yyjson.hpp
+++ b/include/cpp_yyjson.hpp
@@ -194,7 +194,11 @@ namespace yyjson
         {
             if (size == 0) return init();
             buf_ = std::allocator<char_like>().allocate(size);
+#if defined(_LIBCPP_VERSION)
+            std::uninitialized_default_construct(buf_, buf_ + size);
+#else
             std::ranges::uninitialized_default_construct(buf_, buf_ + size);
+#endif
             size_ = size;
 
             // allocate memory pool
@@ -1487,12 +1491,6 @@ namespace yyjson
                 {
                     return default_caster<U>::from_json(const_value_ref(doc_, val_));
                 }
-                template <typename T>
-                requires (!base_of_value<T>)
-                explicit operator T() const
-                {
-                    return cast<T>();
-                }
 
                 [[nodiscard]] auto write(WriteFlag write_flag = WriteFlag::NoFlag) const
                 {
@@ -1942,12 +1940,6 @@ namespace yyjson
                 {
                     return default_caster<U>::from_json(const_array_ref(*this));
                 }
-                template <typename T>
-                requires (!base_of_value<T>)
-                explicit operator T() const
-                {
-                    return cast<T>();
-                }
             };
 
             template <typename DocType>
@@ -2671,12 +2663,6 @@ namespace yyjson
                 {
                     return default_caster<U>::from_json(const_object_ref(*this));
                 }
-                template <typename T>
-                requires (!base_of_value<T>)
-                explicit operator T() const
-                {
-                    return cast<T>();
-                }
             };
 
             template <typename DocType>
@@ -3206,13 +3192,6 @@ namespace yyjson
             {
                 return detail::default_caster<U>::from_json(*this);
             }
-
-            template <typename T>
-            requires (!detail::base_of_value_ref<T>)
-            explicit operator T() const
-            {
-                return cast<T>();
-            }
         };
 
         class const_array_iter
@@ -3317,12 +3296,6 @@ namespace yyjson
             {
                 return detail::default_caster<U>::from_json(*this);
             }
-            template <typename T>
-            requires (!detail::base_of_value_ref<T>)
-            explicit operator T() const
-            {
-                return cast<T>();
-            }
         };
         [[nodiscard]] inline std::optional<const_array_ref> const_value_ref::as_array() const noexcept
         {
@@ -3458,12 +3431,6 @@ namespace yyjson
             {
                 return detail::default_caster<U>::from_json(*this);
             }
-            template <typename T>
-            requires (!detail::base_of_value_ref<T>)
-            explicit operator T() const
-            {
-                return cast<T>();
-            }
         };
         [[nodiscard]] inline std::optional<const_object_ref> const_value_ref::as_object() const noexcept
         {
@@ -3854,14 +3821,15 @@ namespace yyjson
             auto result = T();
             for (auto&& [key, value] : obj)
             {
-                field_reflection::any_of_field(result, [&](auto field_name, auto& field_value) {
-                    if (key == field_name)
-                    {
-                        field_value = cast<std::remove_cvref_t<decltype(field_value)>>(value);
-                        return true;
-                    }
-                    return false;
-                });
+                field_reflection::any_of_field(
+                    result, [key = std::move(key), value = std::move(value)](auto field_name, auto& field_value) {
+                        if (key == field_name)
+                        {
+                            field_value = cast<std::remove_cvref_t<decltype(field_value)>>(value);
+                            return true;
+                        }
+                        return false;
+                    });
             }
             return result;
         }
@@ -3881,16 +3849,26 @@ namespace yyjson
                 {
                     result.reserve(arr.size());
                 }
+#if defined(_LIBCPP_VERSION)
+                std::transform(arr.begin(), arr.end(), std::back_inserter(result),
+                               [](const auto& e) { return cast<std::ranges::range_value_t<T>>(e); });
+#else
                 std::ranges::transform(arr, std::back_inserter(result),
                                        [](const auto& e) { return cast<std::ranges::range_value_t<T>>(e); });
+#endif
             }
             else  // TODO: fixed size range concept
             {
                 if (arr.size() > std::ranges::size(result))
                     throw bad_cast(
                         fmt::format("the size of JSON array is greater than the size of {}", NAMEOF_TYPE(T)));
+#if defined(_LIBCPP_VERSION)
+                std::transform(arr.begin(), arr.end(), std::ranges::begin(result),
+                               [](const auto& e) { return cast<std::ranges::range_value_t<T>>(e); });
+#else
                 std::ranges::transform(arr, std::ranges::begin(result),
                                        [](const auto& e) { return cast<std::ranges::range_value_t<T>>(e); });
+#endif
             }
 
             return result;
@@ -3900,10 +3878,8 @@ namespace yyjson
 #pragma GCC diagnostic ignored "-Wnonnull"
 #pragma GCC diagnostic ignored "-Wconversion"
 #pragma GCC diagnostic ignored "-Wfloat-conversion"
-#pragma GCC diagnostic ignored "-Wimplicit-float-conversion"
 #pragma GCC diagnostic ignored "-Wfloat-equal"
 #pragma GCC diagnostic ignored "-Wmissing-field-initializers"
-#pragma GCC diagnostic ignored "-Wshorten-64-to-32"
 #endif
         template <typename Json>
         requires (std::same_as<reader::const_value_ref, Json> || writer::detail::base_of_const_value<Json>)
diff --git a/include/field_reflection.hpp b/include/field_reflection.hpp
index da7ad1c..000e077 100644
--- a/include/field_reflection.hpp
+++ b/include/field_reflection.hpp
@@ -10,14 +10,18 @@
 
 #pragma once
 
+#include <cassert>
 #include <climits>  // CHAR_BIT
 #include <limits>
-#include <source_location>
 #include <string_view>
 #include <tuple>
 #include <type_traits>
 #include <utility>
 
+#if !defined(__clang__)
+#include <source_location>
+#endif
+
 namespace field_reflection
 {
     namespace detail
@@ -25,7 +29,6 @@ namespace field_reflection
 
 #if defined(__GNUC__) || defined(__clang__)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wundefined-inline"
 #endif
         template <typename T, std::size_t = 0>
         struct any_lref
@@ -610,7 +613,7 @@ namespace field_reflection
         template <typename T, auto Ptr>
         consteval std::string_view get_function_name()
         {
-#if defined(__clang__) && defined(_WIN32)
+#if defined(__clang__)
             // clang-cl returns function_name() as __FUNCTION__ instead of __PRETTY_FUNCTION__
             return std::string_view{__PRETTY_FUNCTION__};
 #else
